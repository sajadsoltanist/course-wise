"""Add UserSession model for database-based session management

Revision ID: 7e97cfe14b06
Revises: 
Create Date: 2025-08-15 03:33:04.157550

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7e97cfe14b06'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Apply migration changes."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('course_code', sa.String(length=20), nullable=False, comment='Unique course code (e.g., CS101, MATH201)'),
    sa.Column('course_name', sa.String(length=200), nullable=False, comment='Full course name'),
    sa.Column('theoretical_credits', sa.Integer(), nullable=False, comment='Number of theoretical credit units'),
    sa.Column('practical_credits', sa.Integer(), nullable=False, comment='Number of practical/lab credit units'),
    sa.Column('course_type', sa.String(length=50), nullable=False, comment='Course type: foundation, core, specialized, general'),
    sa.Column('semester_recommended', sa.Integer(), nullable=True, comment='Recommended semester for taking this course (1-8)'),
    sa.Column('entry_year', sa.Integer(), nullable=False, comment='Academic entry year this course applies to'),
    sa.Column('is_mandatory', sa.Boolean(), nullable=False, comment='Whether this course is mandatory or elective'),
    sa.Column('description', sa.Text(), nullable=True, comment='Course description and details'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint("course_type IN ('foundation', 'core', 'specialized', 'general')", name='check_valid_course_type'),
    sa.CheckConstraint('entry_year >= 1390 AND entry_year <= 1410', name='check_valid_entry_year'),
    sa.CheckConstraint('practical_credits >= 0 AND practical_credits <= 6', name='check_valid_practical_credits'),
    sa.CheckConstraint('semester_recommended IS NULL OR (semester_recommended >= 1 AND semester_recommended <= 8)', name='check_valid_recommended_semester'),
    sa.CheckConstraint('theoretical_credits + practical_credits > 0', name='check_has_credits'),
    sa.CheckConstraint('theoretical_credits >= 0 AND theoretical_credits <= 6', name='check_valid_theoretical_credits'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_course_mandatory_type', 'courses', ['is_mandatory', 'course_type'], unique=False)
    op.create_index('idx_course_semester_year', 'courses', ['semester_recommended', 'entry_year'], unique=False)
    op.create_index('idx_course_type_year', 'courses', ['course_type', 'entry_year'], unique=False)
    op.create_index(op.f('ix_courses_course_code'), 'courses', ['course_code'], unique=True)
    op.create_index(op.f('ix_courses_entry_year'), 'courses', ['entry_year'], unique=False)
    op.create_table('elective_groups',
    sa.Column('group_name', sa.String(length=100), nullable=False, comment='Name of the elective group (e.g., هوش مصنوعی, شبکه\u200cهای کامپیوتری)'),
    sa.Column('required_courses_count', sa.Integer(), nullable=False, comment='Number of courses student must select from this group'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of the elective group and its focus area'),
    sa.Column('entry_year', sa.Integer(), nullable=True, comment='Specific entry year this group applies to (optional)'),
    sa.Column('min_semester', sa.Integer(), nullable=True, comment='Minimum semester when students can select from this group'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint('entry_year IS NULL OR (entry_year >= 1390 AND entry_year <= 1410)', name='check_valid_entry_year'),
    sa.CheckConstraint('min_semester IS NULL OR (min_semester >= 1 AND min_semester <= 8)', name='check_valid_min_semester'),
    sa.CheckConstraint('required_courses_count >= 1 AND required_courses_count <= 10', name='check_valid_required_courses_count'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_elective_group_semester', 'elective_groups', ['min_semester'], unique=False)
    op.create_index('idx_elective_group_year', 'elective_groups', ['entry_year'], unique=False)
    op.create_index(op.f('ix_elective_groups_entry_year'), 'elective_groups', ['entry_year'], unique=False)
    op.create_index(op.f('ix_elective_groups_group_name'), 'elective_groups', ['group_name'], unique=True)
    op.create_table('students',
    sa.Column('telegram_user_id', sa.BigInteger(), nullable=False, comment='Telegram user ID for bot integration'),
    sa.Column('student_number', sa.String(length=20), nullable=True, comment='University student number'),
    sa.Column('major', sa.String(length=100), nullable=True, comment="Student's major (e.g., مهندسی کامپیوتر)"),
    sa.Column('entry_year', sa.Integer(), nullable=True, comment='Academic entry year (e.g., 1401, 1402)'),
    sa.Column('current_semester', sa.Integer(), nullable=True, comment='Current semester number (1-8)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint('current_semester >= 1 AND current_semester <= 8', name='check_valid_semester'),
    sa.CheckConstraint('entry_year >= 1390 AND entry_year <= 1410', name='check_valid_entry_year'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_student_major_year', 'students', ['major', 'entry_year'], unique=False)
    op.create_index('idx_student_telegram_entry', 'students', ['telegram_user_id', 'entry_year'], unique=False)
    op.create_index(op.f('ix_students_entry_year'), 'students', ['entry_year'], unique=False)
    op.create_index(op.f('ix_students_student_number'), 'students', ['student_number'], unique=True)
    op.create_index(op.f('ix_students_telegram_user_id'), 'students', ['telegram_user_id'], unique=True)
    op.create_table('user_sessions',
    sa.Column('telegram_user_id', sa.BigInteger(), nullable=False, comment='Telegram user ID for session identification'),
    sa.Column('current_step', sa.String(length=50), nullable=False, comment='Current conversation step (start, waiting_grades, etc.)'),
    sa.Column('session_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Flexible JSON storage for session-specific data'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Session expiration timestamp'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint("current_step IN ('start', 'registration', 'waiting_student_info', 'waiting_grades', 'confirming_grades', 'waiting_preferences', 'showing_recommendation', 'completed')", name='check_valid_step'),
    sa.CheckConstraint('expires_at > created_at', name='check_valid_expiration'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_session_active', 'user_sessions', ['telegram_user_id', 'expires_at'], unique=False)
    op.create_index('idx_session_expires', 'user_sessions', ['expires_at'], unique=False)
    op.create_index('idx_session_step', 'user_sessions', ['current_step'], unique=False)
    op.create_index('idx_session_telegram_user', 'user_sessions', ['telegram_user_id'], unique=False)
    op.create_index(op.f('ix_user_sessions_telegram_user_id'), 'user_sessions', ['telegram_user_id'], unique=True)
    op.create_table('course_prerequisites',
    sa.Column('course_id', sa.Integer(), nullable=False, comment='The course that has prerequisites'),
    sa.Column('prerequisite_course_id', sa.Integer(), nullable=False, comment='The prerequisite course'),
    sa.Column('is_corequisite', sa.Boolean(), nullable=False, comment='True if this is a corequisite (must be taken together)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint('course_id != prerequisite_course_id', name='check_no_self_prerequisite'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prerequisite_course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('course_id', 'prerequisite_course_id', name='uq_course_prerequisite')
    )
    op.create_index('idx_prerequisite_course', 'course_prerequisites', ['course_id'], unique=False)
    op.create_index('idx_prerequisite_dependency', 'course_prerequisites', ['prerequisite_course_id'], unique=False)
    op.create_index('idx_prerequisite_type', 'course_prerequisites', ['is_corequisite'], unique=False)
    op.create_table('group_courses',
    sa.Column('group_id', sa.Integer(), nullable=False, comment='Reference to elective group'),
    sa.Column('course_id', sa.Integer(), nullable=False, comment='Reference to course'),
    sa.Column('priority', sa.Integer(), nullable=True, comment='Priority or order of this course within the group'),
    sa.Column('recommendation_level', sa.String(length=20), nullable=True, comment='Recommendation level: strongly_recommended, recommended, optional'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint("recommendation_level IS NULL OR recommendation_level IN ('strongly_recommended', 'recommended', 'optional')", name='check_valid_recommendation_level'),
    sa.CheckConstraint('priority IS NULL OR priority >= 1', name='check_valid_priority'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['elective_groups.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id', 'course_id', name='uq_group_course')
    )
    op.create_index('idx_group_course_course', 'group_courses', ['course_id'], unique=False)
    op.create_index('idx_group_course_group', 'group_courses', ['group_id'], unique=False)
    op.create_index('idx_group_course_priority', 'group_courses', ['group_id', 'priority'], unique=False)
    op.create_index('idx_group_course_recommendation', 'group_courses', ['recommendation_level'], unique=False)
    op.create_table('student_grades',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='Reference to student'),
    sa.Column('course_id', sa.Integer(), nullable=False, comment='Reference to course'),
    sa.Column('grade', sa.Numeric(precision=4, scale=2), nullable=True, comment='Numerical grade (0.00 to 20.00)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Course completion status'),
    sa.Column('semester_taken', sa.Integer(), nullable=True, comment='Semester when course was taken'),
    sa.Column('attempt_number', sa.Integer(), nullable=False, comment='Attempt number for this course'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint("status IN ('passed', 'failed', 'withdrawn')", name='check_valid_status'),
    sa.CheckConstraint('attempt_number >= 1 AND attempt_number <= 5', name='check_valid_attempt'),
    sa.CheckConstraint('grade IS NULL OR (grade >= 0.00 AND grade <= 20.00)', name='check_valid_grade'),
    sa.CheckConstraint('semester_taken >= 1 AND semester_taken <= 8', name='check_valid_semester_taken'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_id', 'course_id', 'attempt_number', name='uq_student_course_attempt')
    )
    op.create_index('idx_grade_course_semester', 'student_grades', ['course_id', 'semester_taken'], unique=False)
    op.create_index('idx_grade_status_grade', 'student_grades', ['status', 'grade'], unique=False)
    op.create_index('idx_grade_student_status', 'student_grades', ['student_id', 'status'], unique=False)
    op.create_table('student_specializations',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='Reference to student'),
    sa.Column('group_id', sa.Integer(), nullable=False, comment='Reference to elective group'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the table'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['group_id'], ['elective_groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_id', 'group_id', name='uq_student_group_specialization')
    )
    op.create_index('idx_specialization_group', 'student_specializations', ['group_id'], unique=False)
    op.create_index('idx_specialization_student', 'student_specializations', ['student_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert migration changes."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_specialization_student', table_name='student_specializations')
    op.drop_index('idx_specialization_group', table_name='student_specializations')
    op.drop_table('student_specializations')
    op.drop_index('idx_grade_student_status', table_name='student_grades')
    op.drop_index('idx_grade_status_grade', table_name='student_grades')
    op.drop_index('idx_grade_course_semester', table_name='student_grades')
    op.drop_table('student_grades')
    op.drop_index('idx_group_course_recommendation', table_name='group_courses')
    op.drop_index('idx_group_course_priority', table_name='group_courses')
    op.drop_index('idx_group_course_group', table_name='group_courses')
    op.drop_index('idx_group_course_course', table_name='group_courses')
    op.drop_table('group_courses')
    op.drop_index('idx_prerequisite_type', table_name='course_prerequisites')
    op.drop_index('idx_prerequisite_dependency', table_name='course_prerequisites')
    op.drop_index('idx_prerequisite_course', table_name='course_prerequisites')
    op.drop_table('course_prerequisites')
    op.drop_index(op.f('ix_user_sessions_telegram_user_id'), table_name='user_sessions')
    op.drop_index('idx_session_telegram_user', table_name='user_sessions')
    op.drop_index('idx_session_step', table_name='user_sessions')
    op.drop_index('idx_session_expires', table_name='user_sessions')
    op.drop_index('idx_session_active', table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_students_telegram_user_id'), table_name='students')
    op.drop_index(op.f('ix_students_student_number'), table_name='students')
    op.drop_index(op.f('ix_students_entry_year'), table_name='students')
    op.drop_index('idx_student_telegram_entry', table_name='students')
    op.drop_index('idx_student_major_year', table_name='students')
    op.drop_table('students')
    op.drop_index(op.f('ix_elective_groups_group_name'), table_name='elective_groups')
    op.drop_index(op.f('ix_elective_groups_entry_year'), table_name='elective_groups')
    op.drop_index('idx_elective_group_year', table_name='elective_groups')
    op.drop_index('idx_elective_group_semester', table_name='elective_groups')
    op.drop_table('elective_groups')
    op.drop_index(op.f('ix_courses_entry_year'), table_name='courses')
    op.drop_index(op.f('ix_courses_course_code'), table_name='courses')
    op.drop_index('idx_course_type_year', table_name='courses')
    op.drop_index('idx_course_semester_year', table_name='courses')
    op.drop_index('idx_course_mandatory_type', table_name='courses')
    op.drop_table('courses')
    # ### end Alembic commands ### 